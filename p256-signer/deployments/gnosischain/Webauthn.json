{
  "address": "0x04641D72fbE21Db00c1d2f04d19E8206fB8D1eD3",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAuthenticatorData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidClientData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "authenticatorData",
          "type": "bytes"
        },
        {
          "internalType": "bytes1",
          "name": "authenticatorDataFlagMask",
          "type": "bytes1"
        },
        {
          "internalType": "bytes",
          "name": "clientData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "clientChallenge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "clientChallengeDataOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "rs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "Q",
          "type": "uint256[2]"
        }
      ],
      "name": "checkSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb95e7faef0c1f6bc44314c62be6b3fa39e10aa75c4da539768acc28fe5125edd",
  "receipt": {
    "to": "0x6A78a27E52fa669C0a5246574Ece2e9a64c483B1",
    "from": "0x7F1c3D46E52A2Fcef4B28BCfeEB11030A4544EFd",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "1594553",
    "logsBloom": "0x
    "blockHash": "0xdad12df8f5ad848eab5670554c4d8b2e7ef0e138a4849d1dd3b8342300cd9a52",
    "transactionHash": "0xb95e7faef0c1f6bc44314c62be6b3fa39e10aa75c4da539768acc28fe5125edd",
    "logs": [],
    "blockNumber": 30160850,
    "cumulativeGasUsed": "2261818",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5775f6fb0e5df41b1e0121d96a0fbccf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAuthenticatorData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClientData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"authenticatorData\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"authenticatorDataFlagMask\",\"type\":\"bytes1\"},{\"internalType\":\"bytes\",\"name\":\"clientData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"clientChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"clientChallengeDataOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"rs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Q\",\"type\":\"uint256[2]\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Webauthn.sol\":\"Webauthn\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Base64URL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64URL {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode32(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        //string memory result = new string(4 * ((data.length + 2) / 3));\\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            /*\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n*/\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcf1ca3e3e85d1b22dec76240ef3b23f9f6416d76eb7483b80a7d0a8a8e9aa664\",\"license\":\"MIT\"},\"contracts/FCL/FCL_elliptic.sol\":{\"content\":\"//********************************************************************************************/\\n//  ___           _       ___               _         _    _ _    \\n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \\n// | _| '_/ -_|_-< ' \\\\  | (__| '_| || | '_ \\\\  _/ _ \\\\ | |__| | '_ \\\\\\n// |_||_| \\\\___/__/_||_|  \\\\___|_|  \\\\_, | .__/\\\\__\\\\___/ |____|_|_.__/\\n//                                |__/|_|                        \\n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \\n///* License: This software is licensed under MIT License \\t \\n///* This Code may be reused including license and copyright notice. \\t \\n///* See LICENSE file at the root folder of the project.\\t\\t\\t\\t \\n///* FILE: FCL_elliptic.sol\\t\\t\\t\\t\\t\\t         \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\\n///*  optimization\\n///* \\n//**************************************************************************************/\\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\\n// if ever used for other curve than sec256R1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary FCL_Elliptic_ZZ {\\n    // Set parameters for curve sec256r1.\\n    \\n    //curve prime field modulus\\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    //short weierstrass first coefficient\\n    uint constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    //short weierstrass second coefficient    \\n    uint constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    //generating point affine coordinates    \\n    uint constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    //curve order (number of points)\\n    uint constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \\n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\\n    /* -2 mod n constant, used to speed up inversion*/\\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \\n       \\n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    \\n    /**\\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {\\n            \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2modn)\\n            mstore(add(pointer, 0xa0), n)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n       \\n    }\\n     /**\\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {  \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2)\\n            mstore(add(pointer, 0xa0), p)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from affine rep to XYZZ rep*/\\n    function ecAff_SetZZ(\\n        uint x0,\\n        uint y0\\n    ) internal pure returns (uint[4] memory P) {\\n        unchecked {\\n            P[2] = 1; //ZZ\\n            P[3] = 1; //ZZZ\\n            P[0] = x0;\\n            P[1] = y0;\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from XYZZ rep to affine rep*/ \\n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\\n    function ecZZ_SetAff( uint x,\\n        uint y,\\n        uint zz,\\n        uint zzz) internal view  returns (uint x1, uint y1)\\n    {\\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\\n      y1=mulmod(y,zzzInv,p);//Y/zzz\\n      uint b=mulmod(zz, zzzInv,p); //1/z\\n      zzzInv= mulmod(b,b,p); //1/zz\\n      x1=mulmod(x,zzzInv,p);//X/zz\\n    }\\n    \\n \\n    \\n    /**\\n    /* @dev Sutherland2008 doubling*/\\n    /* The \\\"dbl-2008-s-1\\\" doubling formulas */\\n    \\n    function ecZZ_Dbl(\\n    \\tuint x,\\n        uint y,\\n        uint zz,\\n        uint zzz\\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n    {\\n     unchecked{\\n     assembly{\\n      P0:=mulmod(2, y, p) //U = 2*Y1\\n      P2:=mulmod(P0,P0,p)  // V=U^2\\n      P3:=mulmod(x, P2,p)// S = X1*V\\n      P1:=mulmod(P0, P2,p) // W=UV\\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\\n      }\\n     }\\n     return (P0, P1, P2, P3);\\n    }\\n    \\n     /**\\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\\n     */\\n     \\n    //tbd: return -x1 and -Y1 in double to avoid two substractions\\n    function ecZZ_AddN(\\n    \\tuint x1,\\n        uint y1,\\n        uint zz1,\\n        uint zzz1,\\n        uint x2,\\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n     {\\n       unchecked{\\n      if(y1==0){\\n       return (x2,y2,1,1);\\n      }\\n  \\n       assembly{\\n      y1:=sub(p, y1)\\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \\n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \\n      P0:=mulmod(x2, x2, p)//PP = P^2\\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\\n     }\\n    //end assembly\\n      }//end unchecked\\n      return (P0, P1, P2, P3);\\n     }\\n       \\n     /**\\n     * @dev Return the zero curve in XYZZ coordinates.\\n     */\\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\\n        return (0, 0, 0, 0);\\n    }\\n     /**\\n     * @dev Check if point is the neutral of the curve\\n     */\\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\\n    {\\n     if ( (y0 == 0)  ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\\n     */\\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve in affine rep.\\n     */\\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\\n        return (y==0);\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\\n     */\\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n        unchecked {\\n            uint LHS = mulmod(y, y, p); // y^2\\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n           \\n            return LHS == RHS;\\n        }\\n    }\\n    \\n\\n      /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n     \\n    function ecAff_add(\\n        uint x0,\\n        uint y0,\\n        uint x1,\\n        uint y1\\n    ) internal view returns (uint, uint) {\\n        uint zz0;\\n        uint zzz0;\\n        \\n\\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\\n\\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\\n\\t\\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\\n\\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\\n    }\\n\\n     /**\\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\\n     */\\n     function ecZZ_mulmuladd_S_asm(\\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\\n        uint scalar_u,\\n        uint scalar_v\\n    ) internal view returns (uint X) {\\n     uint zz;\\n     uint zzz;\\n     uint Y;\\n     uint index=255;\\n     uint[6] memory T;\\n     uint H0;\\n     uint H1;   \\n     \\n     unchecked {\\n     \\n     if(scalar_u==0 && scalar_v==0) return 0;\\n     \\n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\\n   \\n   /*\\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\\n      index=index-1; \\n     }\\n     */\\n         \\n      assembly{\\n      \\n     \\n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      } eq(T4,0) {\\n        index := sub(index, 1)\\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      }\\n      {}\\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n           \\n      if eq(zz,1) {\\n      \\tX:=gx\\n      \\tY:=gy\\n      \\t}\\n      if eq(zz,2) {\\n       X:=Q0\\n      \\tY:=Q1\\n      }\\n      if eq(zz,3) {\\n      \\t X:=H0\\n      \\t Y:= H1\\n      }\\n     \\n      index:=sub(index,1)\\n      zz:=1\\n      zzz:=1\\n      \\n      for {   } gt( minus_1, index) { index := sub(index, 1) } \\n      {\\n      // inlined EcZZ_Dbl\\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n      \\n     { \\n      //value of dibit\\t\\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      \\n      if iszero(T4){\\n       Y:=sub(p,Y)//restore the -Y inversion \\n       continue\\n      }// if T4!=0\\n        \\n      if eq(T4,1) {\\n      \\tT1:=gx\\n      \\tT2:=gy\\n      \\t\\n      \\t}\\n      if eq(T4,2) {\\n        T1:=Q0\\n      \\tT2:=Q1\\n      }\\n      if eq(T4,3) {\\n      \\t T1:=H0\\n      \\t T2:= H1\\n      \\t }\\n      \\t \\t \\n       // inlined EcZZ_AddN\\n      //T3:=sub(p, Y)\\n      //T3:=Y\\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\\n      \\n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\\n      //todo : construct edge vector case\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       \\n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      \\n      continue  \\n       }\\n      }\\n      \\n      T4:=mulmod(T2, T2, p)//PP\\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\\n      zz:=mulmod(zz,T4,p) \\n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\\n      let TT2:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\\n     \\n      X:=T4\\n       }\\n          \\n           }//end loop\\n        mstore(add(T, 0x60),zz)\\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n       \\n      //Y:=mulmod(Y,zzz,p)//Y/zzz\\n      //zz :=mulmod(zz, mload(T),p) //1/z\\n      //zz:= mulmod(zz,zz,p) //1/zz\\n      X:=mulmod(X,mload(T),p)//X/zz\\n      } //end assembly\\n     }//end unchecked\\n     \\n      return X;\\n    }\\n    \\n       \\n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\\n      //contract at given address dataPointer\\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\\n      // the external tool to generate tables from public key is in the /sage directory\\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n    \\n      unchecked{ \\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      extcodecopy(dataPointer, T, mload(T), 64)\\n      \\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\t{\\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      let T1:=mulmod(TT1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      }\\n      {\\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      let index2:=sub(index, 64)\\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\\n      let index3:=sub(index2, 64)\\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\\n      index:=sub(index3, 64)\\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      \\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T1){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n       extcodecopy(dataPointer, T,T1, 64)\\n     }\\n     \\n     {\\n     \\n         /* Access to precomputed table using extcodecopy hack */\\n          \\n      // inlined EcZZ_AddN\\n      \\n      \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      \\n      //special case ecAdd(P,P)=EcDbl\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       let T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      let T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n         continue\\n       }\\n      }\\n      \\n      let T4:=mulmod(T2, T2, p)\\n      let T1:=mulmod(T4,T2,p)//\\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\\n      zzz:= mulmod(zzz,T1,p) // W=UV/\\n      let zz1:=mulmod(X, T4, p)\\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\\n      \\n    \\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n   \\n     \\n      // improving the extcodecopy trick : append array at end of contract\\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      unchecked{ \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      codecopy( T, add(mload(T), dataPointer), 64)\\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n     \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      \\n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      index:=sub(index, 64)\\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T4){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n     {\\n         /* Access to precomputed table using extcodecopy hack */\\n      codecopy( T, add(T4, dataPointer), 64)\\n          \\n      // inlined EcZZ_AddN\\n      \\n     \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      T4:=mulmod(T2, T2, p)\\n      T1:=mulmod(T4,T2,p)\\n      T2:=mulmod(zz,T4,p) // W=UV\\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\\n      let zz1:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\\n      zz:=T2\\n      X:=T4\\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n    function ecdsa_verify_mem(\\n        bytes32 message,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) internal view returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,mload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n                \\n    /**\\n     * @dev ECDSA verification, given , signature, and public key.\\n     */\\n    function ecdsa_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint[2] calldata Q\\n    ) internal  returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n     \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        address Shamir8\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n       uint sInv =FCL_nModInv(rs[1]);\\n       //uint sInv =2;\\n       \\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\\n      \\n\\tassembly{\\n\\t\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t\\n\\t \\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n        \\n        \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_hackmem(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint256 endcontract\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n        uint sInv =FCL_nModInv(rs[1]);\\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\\n      \\n\\tassembly{\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n}//EOF\\n\\n\\n\",\"keccak256\":\"0xff4afff0bd9034e0de7df18b225e540636313280237c828428103030093f318a\",\"license\":\"MIT\"},\"contracts/Webauthn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Base64URL} from \\\"./Base64URL.sol\\\";\\nimport {FCL_Elliptic_ZZ} from \\\"./FCL/FCL_elliptic.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nerror InvalidAuthenticatorData();\\nerror InvalidClientData();\\nerror InvalidSignature();\\n\\nlibrary Webauthn {\\n    function checkSignature(\\n        bytes memory authenticatorData,\\n        bytes1 authenticatorDataFlagMask,\\n        bytes memory clientData,\\n        bytes32 clientChallenge,\\n        uint clientChallengeDataOffset,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) public view returns (bool) {\\n        // Let the caller check if User Presence (0x01) or User Verification (0x04) are set\\n        if (\\n            (authenticatorData[32] & authenticatorDataFlagMask) !=\\n            authenticatorDataFlagMask\\n        ) {\\n            revert InvalidAuthenticatorData();\\n        }\\n        // Verify that clientData commits to the expected client challenge\\n        string memory challengeEncoded = Base64URL.encode32(\\n            abi.encodePacked(clientChallenge)\\n        );\\n        bytes memory challengeExtracted = new bytes(\\n            bytes(challengeEncoded).length\\n        );\\n        copyBytes(\\n            clientData,\\n            clientChallengeDataOffset,\\n            challengeExtracted.length,\\n            challengeExtracted,\\n            0\\n        );\\n        if (\\n            keccak256(abi.encodePacked(bytes(challengeEncoded))) !=\\n            keccak256(abi.encodePacked(challengeExtracted))\\n        ) {\\n            revert InvalidClientData();\\n        }      \\n        // Verify the signature over sha256(authenticatorData || sha256(clientData))\\n        bytes memory verifyData = new bytes(authenticatorData.length + 32);\\n        copyBytes(\\n            authenticatorData,\\n            0,\\n            authenticatorData.length,\\n            verifyData,\\n            0\\n        );\\n        copyBytes(\\n            abi.encodePacked(sha256(clientData)),\\n            0,\\n            32,\\n            verifyData,\\n            authenticatorData.length\\n        );\\n        bytes32 message = sha256(verifyData);\\n        return FCL_Elliptic_ZZ.ecdsa_verify_mem(message, rs, Q);\\n    }\\n\\n    /*\\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n  */\\n    function copyBytes(\\n        bytes memory _from,\\n        uint _fromOffset,\\n        uint _length,\\n        bytes memory _to,\\n        uint _toOffset\\n    ) internal pure returns (bytes memory _copiedBytes) {\\n        uint minLength = _length + _toOffset;\\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint j = 32 + _toOffset;\\n        while (i < (32 + _fromOffset + _length)) {\\n            assembly {\\n                let tmp := mload(add(_from, i))\\n                mstore(add(_to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n        return _to;\\n    }\\n}\\n\",\"keccak256\":\"0x231a3e8eca437f9b00d106499b738372cad0095e6263363e338776285f2fed57\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611c2961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630d5efec91461003a575b600080fd5b61004d6100483660046119c0565b610061565b604051901515815260200160405180910390f35b6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916878960208151811061009a5761009a611a95565b0160200151167fff0000000000000000000000000000000000000000000000000000000000000016146100f9576040517ffc93479200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101258660405160200161011191815260200190565b60405160208183030381529060405261035b565b90506000815167ffffffffffffffff81111561014357610143611876565b6040519080825280601f01601f19166020018201604052801561016d576020820181803683370190505b50905061017f88878351846000610484565b50806040516020016101919190611ac4565b60405160208183030381529060405280519060200120826040516020016101b89190611ac4565b6040516020818303038152906040528051906020012014610205576040517febab5d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a5160206102159190611b22565b67ffffffffffffffff81111561022d5761022d611876565b6040519080825280601f01601f191660200182016040528015610257576020820181803683370190505b50905061026a8b60008d51846000610484565b506102eb60028a60405161027e9190611ac4565b602060405180830381855afa15801561029b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102be9190611b35565b6040516020016102d091815260200190565b60405160208183030381529060405260006020848f51610484565b5060006002826040516102fe9190611ac4565b602060405180830381855afa15801561031b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061033e9190611b35565b905061034b818888610512565b9c9b505050505050505050505050565b6060815160000361037a57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611bb4604091399050600060016003855160026103ab9190611b22565b6103b59190611b4e565b6103c0906004611b89565b6103ca9190611ba0565b67ffffffffffffffff8111156103e2576103e2611876565b6040519080825280601f01601f19166020018201604052801561040c576020820181803683370190505b509050600182016020820185865187015b80821015610478576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061041d565b50929695505050505050565b606060006104928386611b22565b905080845110156104a257600080fd5b60006104af876020611b22565b905060006104be856020611b22565b90505b866104cd896020611b22565b6104d79190611b22565b8210156105055788820151868201526104f1602083611b22565b91506104fe602082611b22565b90506104c1565b5093979650505050505050565b81516000901580610544575082517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b8061055157506020830151155b80610580575060208301517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b1561058d575060006106a7565b8151602083015161059e91906106ae565b6105aa575060006106a7565b60006105e684600160200201516105e1907fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551611ba0565b610827565b905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551828709905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518387600060200201510985516020870151919250600091610656919085856108b0565b90507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255187517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551038208159450505050505b9392505050565b60008215806106dc57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b806106e5575081155b8061070f57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b1561071c57506000610821565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000fffffffffffffffffffffffc87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09090890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b8208919091149150505b92915050565b6000610831611858565b60208152602080820152602060408201528260608201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f60808201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255160a082015260208160c0836005600019fa6108a957600080fd5b5192915050565b600080808060ff6108bf611858565b600080891580156108ce575088155b156108e35760009750505050505050506113f6565b61092f7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f58e8e6113fe565b809250819350505060018a851c1660018a861c1660011b015b8061096a5760018503945060018b861c1660018b871c1660011b019050610948565b5060018a851c1660018a861c1660011b019650600187036109cc577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29697507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f594505b600287036109db578b97508a94505b600387036109ea578197508094505b60018403935060019650600195505b837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff111561134f577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff856002097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8182097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f08096003097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b84099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e08820992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b870908985060018e891c1660018e8a1c1660011b01905080610cd557887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03985050505050611344565b60018103610d24577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29693507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f592505b60028103610d33578f93508e92505b60038103610d42578593508492505b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8609087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8e88090893508061113d578361113d577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a60020994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848e0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8486097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d8f0891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8183099150507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e0893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8460030991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b86099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c85099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80847fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848509089c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808e7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038508830993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808b87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03850899505050505050611344565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84850991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8483097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838e099c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838f097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80827fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff878809080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80838e097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03860809089b50505050809b50505050505b6001840393506109f9565b86606084015260208352602080840152602060408401527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808401527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a084015260208360c0856005600019fa6113c757600080fd5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff835189099750505050505050505b949350505050565b600080808086611415578585935093505050611453565b84611427578585935093505050611453565b61143688886001808a8a61145c565b929a509098509250905061144c88888484611721565b9350935050505b94509492505050565b6000806000808860000361147b57508492508391506001905080611714565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9889039889818988090894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a89090895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86870993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84890991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83880990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848b0997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80897fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80848b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038d08090892505b9650965096509692505050565b600080600061172f846117d6565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818709915060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82870990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8289099350505094509492505050565b60006117e0611858565b60208152602080820152602060408201528260608201527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808201527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a082015260208160c0836005600019fa6108a957600080fd5b6040518060c001604052806006906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126118b657600080fd5b813567ffffffffffffffff808211156118d1576118d1611876565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561191757611917611876565b8160405283815286602085880101111561193057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f83011261196157600080fd5b6040516040810181811067ffffffffffffffff8211171561198457611984611876565b806040525080604084018581111561199b57600080fd5b845b818110156119b557803583526020928301920161199d565b509195945050505050565b6000806000806000806000610120888a0312156119dc57600080fd5b873567ffffffffffffffff808211156119f457600080fd5b611a008b838c016118a5565b985060208a013591507fff0000000000000000000000000000000000000000000000000000000000000082168214611a3757600080fd5b90965060408901359080821115611a4d57600080fd5b50611a5a8a828b016118a5565b9550506060880135935060808801359250611a788960a08a01611950565b9150611a878960e08a01611950565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b81811015611ae55760208186018101518583015201611acb565b506000920191825250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082157610821611af3565b600060208284031215611b4757600080fd5b5051919050565b600082611b84577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808202811582820484141761082157610821611af3565b8181038181111561082157610821611af356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5fa2646970667358221220eaf1ca98e985a08fe491859d37834dbac7eb9a1ebdab70e43752f69cd829dd8a64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630d5efec91461003a575b600080fd5b61004d6100483660046119c0565b610061565b604051901515815260200160405180910390f35b6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916878960208151811061009a5761009a611a95565b0160200151167fff0000000000000000000000000000000000000000000000000000000000000016146100f9576040517ffc93479200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101258660405160200161011191815260200190565b60405160208183030381529060405261035b565b90506000815167ffffffffffffffff81111561014357610143611876565b6040519080825280601f01601f19166020018201604052801561016d576020820181803683370190505b50905061017f88878351846000610484565b50806040516020016101919190611ac4565b60405160208183030381529060405280519060200120826040516020016101b89190611ac4565b6040516020818303038152906040528051906020012014610205576040517febab5d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a5160206102159190611b22565b67ffffffffffffffff81111561022d5761022d611876565b6040519080825280601f01601f191660200182016040528015610257576020820181803683370190505b50905061026a8b60008d51846000610484565b506102eb60028a60405161027e9190611ac4565b602060405180830381855afa15801561029b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102be9190611b35565b6040516020016102d091815260200190565b60405160208183030381529060405260006020848f51610484565b5060006002826040516102fe9190611ac4565b602060405180830381855afa15801561031b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061033e9190611b35565b905061034b818888610512565b9c9b505050505050505050505050565b6060815160000361037a57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611bb4604091399050600060016003855160026103ab9190611b22565b6103b59190611b4e565b6103c0906004611b89565b6103ca9190611ba0565b67ffffffffffffffff8111156103e2576103e2611876565b6040519080825280601f01601f19166020018201604052801561040c576020820181803683370190505b509050600182016020820185865187015b80821015610478576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061041d565b50929695505050505050565b606060006104928386611b22565b905080845110156104a257600080fd5b60006104af876020611b22565b905060006104be856020611b22565b90505b866104cd896020611b22565b6104d79190611b22565b8210156105055788820151868201526104f1602083611b22565b91506104fe602082611b22565b90506104c1565b5093979650505050505050565b81516000901580610544575082517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b8061055157506020830151155b80610580575060208301517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b1561058d575060006106a7565b8151602083015161059e91906106ae565b6105aa575060006106a7565b60006105e684600160200201516105e1907fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551611ba0565b610827565b905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551828709905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518387600060200201510985516020870151919250600091610656919085856108b0565b90507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255187517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551038208159450505050505b9392505050565b60008215806106dc57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b806106e5575081155b8061070f57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b1561071c57506000610821565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000fffffffffffffffffffffffc87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09090890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b8208919091149150505b92915050565b6000610831611858565b60208152602080820152602060408201528260608201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f60808201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255160a082015260208160c0836005600019fa6108a957600080fd5b5192915050565b600080808060ff6108bf611858565b600080891580156108ce575088155b156108e35760009750505050505050506113f6565b61092f7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f58e8e6113fe565b809250819350505060018a851c1660018a861c1660011b015b8061096a5760018503945060018b861c1660018b871c1660011b019050610948565b5060018a851c1660018a861c1660011b019650600187036109cc577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29697507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f594505b600287036109db578b97508a94505b600387036109ea578197508094505b60018403935060019650600195505b837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff111561134f577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff856002097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8182097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f08096003097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b84099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e08820992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b870908985060018e891c1660018e8a1c1660011b01905080610cd557887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03985050505050611344565b60018103610d24577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29693507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f592505b60028103610d33578f93508e92505b60038103610d42578593508492505b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8609087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8e88090893508061113d578361113d577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a60020994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848e0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8486097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d8f0891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8183099150507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e0893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8460030991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b86099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c85099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80847fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848509089c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808e7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038508830993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808b87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03850899505050505050611344565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84850991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8483097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838e099c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838f097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80827fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff878809080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80838e097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03860809089b50505050809b50505050505b6001840393506109f9565b86606084015260208352602080840152602060408401527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808401527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a084015260208360c0856005600019fa6113c757600080fd5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff835189099750505050505050505b949350505050565b600080808086611415578585935093505050611453565b84611427578585935093505050611453565b61143688886001808a8a61145c565b929a509098509250905061144c88888484611721565b9350935050505b94509492505050565b6000806000808860000361147b57508492508391506001905080611714565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9889039889818988090894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a89090895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86870993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84890991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83880990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848b0997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80897fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80848b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038d08090892505b9650965096509692505050565b600080600061172f846117d6565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818709915060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82870990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8289099350505094509492505050565b60006117e0611858565b60208152602080820152602060408201528260608201527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808201527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a082015260208160c0836005600019fa6108a957600080fd5b6040518060c001604052806006906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126118b657600080fd5b813567ffffffffffffffff808211156118d1576118d1611876565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561191757611917611876565b8160405283815286602085880101111561193057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f83011261196157600080fd5b6040516040810181811067ffffffffffffffff8211171561198457611984611876565b806040525080604084018581111561199b57600080fd5b845b818110156119b557803583526020928301920161199d565b509195945050505050565b6000806000806000806000610120888a0312156119dc57600080fd5b873567ffffffffffffffff808211156119f457600080fd5b611a008b838c016118a5565b985060208a013591507fff0000000000000000000000000000000000000000000000000000000000000082168214611a3757600080fd5b90965060408901359080821115611a4d57600080fd5b50611a5a8a828b016118a5565b9550506060880135935060808801359250611a788960a08a01611950565b9150611a878960e08a01611950565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b81811015611ae55760208186018101518583015201611acb565b506000920191825250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082157610821611af3565b600060208284031215611b4757600080fd5b5051919050565b600082611b84577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808202811582820484141761082157610821611af3565b8181038181111561082157610821611af356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5fa2646970667358221220eaf1ca98e985a08fe491859d37834dbac7eb9a1ebdab70e43752f69cd829dd8a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}