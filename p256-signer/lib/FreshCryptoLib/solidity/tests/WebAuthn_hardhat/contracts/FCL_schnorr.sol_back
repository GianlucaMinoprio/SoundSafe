//********************************************************************************************/
//  ___           _       ___               _         _    _ _    
// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ 
// | _| '_/ -_|_-< ' \  | (__| '_| || | '_ \  _/ _ \ | |__| | '_ \
// |_||_| \___/__/_||_|  \___|_|  \_, | .__/\__\___/ |____|_|_.__/
//                                |__/|_|                        
///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project 
///* License: This software is licensed under MIT License 	 
///* This Code may be reused including license and copyright notice. 	 
///* See LICENSE file at the root folder of the project.				 
///* FILE: FCL_elliptic.sol						         
///* 											 
///* 											 
///* DESCRIPTION: modified schnorr signature algorithm over sec256k1, compatible with ethereum precompile
///*  optimization using vitalik hack:
///* https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384
///*  /*https://en.wikipedia.org/wiki/Schnorr_signature*/
//**************************************************************************************/



pragma solidity ^0.8.0;


contract FCL_ECSchnorr{
  
  uint256 constant p=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;
  uint256 constant n=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;
  uint256 constant minus_2modn =0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD036413A;
  
   
  /* computes H(aP+bQ), given a, b^-1, Qx and parity of Qy */ 
  function FCL_ec_hmulmuladd(uint256 alpha, uint256 Qx, uint256 Qyp, uint256 beta) public  returns (uint256 result) {
   
  assembly{
    let pointer := mload(0x40)
        mstore(pointer, mulmod(Qx, sub(p, alpha)),n )//msgh =-Qx.a
        mstore(add(pointer, 32), mload(sub(28,Qyp)))//v, 27 or 28 according to parity of point
        mstore(add(pointer, 64), Qx)//r
        mstore(add(pointer, 96), mulmod(Qx,beta, n))//s=beta.Qx
        
    if iszero(call(not(0), 0x01, 0, pointer, 128, result, 0x20)) {
                revert(0, 0)
            }

    }
  }
    /**
    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/
    function FCL_nModInv(uint256 u) public  returns (uint256 result) {
        uint[6] memory pointer;
        assembly {
            
            // Define length of base, exponent and modulus. 0x20 == 32 bytes
            mstore(pointer, 0x20)
            mstore(add(pointer, 0x20), 0x20)
            mstore(add(pointer, 0x40), 0x20)
            // Define variables base, exponent and modulus
            mstore(add(pointer, 0x60), u)
            mstore(add(pointer, 0x80), minus_2modn)
            mstore(add(pointer, 0xa0), n)
          
            // Call the precompiled contract 0x05 = ModExp
            if iszero(call(not(0), 0x05, 0, pointer, 0xc0, pointer, 0x20)) {
                revert(0, 0)
            }
            result:=mload(pointer)
        }
       
    }
    
 /* a schnorr verification, assisted with a witness of r to help precompiles, only 80 bits of security*/ 
 function FCL_ec_ethSchnorr_Verify_unsec(uint256 Qx, uint256 Qyp, uint256 s, uint256 e, uint256 wit_r) public returns (bool result){
    
   return (wit_r==FCL_ec_hmulmuladd(s, Qx, Qyp, e));
  }
 
 /* a schnorr verification, assisted with a witness of r to help precompiles, only 80 bits of security*/ 
 function FCL_ec_ethSchnorr_Verify_(uint256 Qx, uint256 Qyp, uint256 s, uint256 e, uint256 wit_hr, uint256 wit_minushr) public returns (bool result){
   
   
   /* compute H(sG+eQ) */ 
   if (wit_r!=FCL_ec_hmulmuladd(s, Qx, Qyp, e)){
    return false;
   };
  
   if (wit_minushr!=FCL_ec_hmulmuladd(sub(p, s), Qx, Qyp, sub(p, e))){
     return false;
  }
 
  return true;
    
}
