/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mockerc20.sol/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200097f3803806200097f83398101604081905262000034916200014a565b600062000042858262000264565b50600162000051848262000264565b506002805460ff191660ff939093169290921790915560038190553360009081526004602052604090205550620003309050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000ad57600080fd5b81516001600160401b0380821115620000ca57620000ca62000085565b604051601f8301601f19908116603f01168101908282118183101715620000f557620000f562000085565b816040528381526020925086838588010111156200011257600080fd5b600091505b8382101562000136578582018301518183018401529082019062000117565b600093810190920192909252949350505050565b600080600080608085870312156200016157600080fd5b84516001600160401b03808211156200017957600080fd5b62000187888389016200009b565b955060208701519150808211156200019e57600080fd5b50620001ad878288016200009b565b935050604085015160ff81168114620001c557600080fd5b6060959095015193969295505050565b600181811c90821680620001ea57607f821691505b6020821081036200020b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025f57600081815260208120601f850160051c810160208610156200023a5750805b601f850160051c820191505b818110156200025b5782815560010162000246565b5050505b505050565b81516001600160401b0381111562000280576200028062000085565b6200029881620002918454620001d5565b8462000211565b602080601f831160018114620002d05760008415620002b75750858301515b600019600386901b1c1916600185901b1785556200025b565b600085815260208120601f198616915b828110156200030157888601518255948401946001909101908401620002e0565b5085821015620003205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61063f80620003406000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b4114610152578063a9059cbb1461015a578063dd62ed3e1461016d57600080fd5b8063313ce5671461011357806370a082311461013257600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd14610100575b600080fd5b6100b0610198565b6040516100bd9190610497565b60405180910390f35b6100d96100d4366004610501565b610226565b60405190151581526020016100bd565b6100f260035481565b6040519081526020016100bd565b6100d961010e36600461052b565b610255565b6002546101209060ff1681565b60405160ff90911681526020016100bd565b6100f2610140366004610567565b60046020526000908152604090205481565b6100b06103d1565b6100d9610168366004610501565b6103de565b6100f261017b366004610589565b600560209081526000928352604080842090915290825290205481565b600080546101a5906105bc565b80601f01602080910402602001604051908101604052809291908181526020018280546101d1906105bc565b801561021e5780601f106101f35761010080835404028352916020019161021e565b820191906000526020600020905b81548152906001019060200180831161020157829003601f168201915b505050505081565b3360009081526005602090815260408083206001600160a01b0386168452909152902081905560015b92915050565b6001600160a01b0383166000908152600460205260408120548211156102c25760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e636500000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b03841660009081526005602090815260408083203384529091529020548211156103355760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e63650000000000000000000060448201526064016102b9565b6001600160a01b0384166000908152600460205260408120805484929061035d90849061060c565b90915550506001600160a01b0383166000908152600460205260408120805484929061038a90849061061f565b90915550506001600160a01b0384166000908152600560209081526040808320338452909152812080548492906103c290849061060c565b90915550600195945050505050565b600180546101a5906105bc565b3360009081526004602052604081205482111561043d5760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e636500000000000000000000000060448201526064016102b9565b336000908152600460205260408120805484929061045c90849061060c565b90915550506001600160a01b0383166000908152600460205260408120805484929061048990849061061f565b909155506001949350505050565b600060208083528351808285015260005b818110156104c4578581018301518582016040015282016104a8565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146104fc57600080fd5b919050565b6000806040838503121561051457600080fd5b61051d836104e5565b946020939093013593505050565b60008060006060848603121561054057600080fd5b610549846104e5565b9250610557602085016104e5565b9150604084013590509250925092565b60006020828403121561057957600080fd5b610582826104e5565b9392505050565b6000806040838503121561059c57600080fd5b6105a5836104e5565b91506105b3602084016104e5565b90509250929050565b600181811c908216806105d057607f821691505b6020821081036105f057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561024f5761024f6105f6565b8082018082111561024f5761024f6105f656fea164736f6c6343000814000a";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _totalSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      _totalSupply,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _totalSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      _totalSupply,
      overrides || {}
    ) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
