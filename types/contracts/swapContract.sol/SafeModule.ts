/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SafeModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedAddress"
      | "isAuthorized"
      | "removeAuthorizedAddress"
      | "requestSwap"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SwapRequested"): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSwap",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSwap",
    data: BytesLike
  ): Result;
}

export namespace SwapRequestedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenToSwap: AddressLike,
    desiredToken: AddressLike,
    amountToSwap: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenToSwap: string,
    desiredToken: string,
    amountToSwap: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenToSwap: string;
    desiredToken: string;
    amountToSwap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SafeModule extends BaseContract {
  connect(runner?: ContractRunner | null): SafeModule;
  waitForDeployment(): Promise<this>;

  interface: SafeModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  isAuthorized: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  removeAuthorizedAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSwap: TypedContractMethod<
    [
      tokenToSwap: AddressLike,
      desiredToken: AddressLike,
      amountToSwap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAuthorizedAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestSwap"
  ): TypedContractMethod<
    [
      tokenToSwap: AddressLike,
      desiredToken: AddressLike,
      amountToSwap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SwapRequested"
  ): TypedContractEvent<
    SwapRequestedEvent.InputTuple,
    SwapRequestedEvent.OutputTuple,
    SwapRequestedEvent.OutputObject
  >;

  filters: {
    "SwapRequested(address,address,address,uint256)": TypedContractEvent<
      SwapRequestedEvent.InputTuple,
      SwapRequestedEvent.OutputTuple,
      SwapRequestedEvent.OutputObject
    >;
    SwapRequested: TypedContractEvent<
      SwapRequestedEvent.InputTuple,
      SwapRequestedEvent.OutputTuple,
      SwapRequestedEvent.OutputObject
    >;
  };
}
