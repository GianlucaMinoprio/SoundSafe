/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SwapModuleInterface extends Interface {
  getFunction(nameOrSignature: "swapToken"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OK" | "SwapTokenRequest"): EventFragment;

  encodeFunctionData(
    functionFragment: "swapToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "swapToken", data: BytesLike): Result;
}

export namespace OKEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokenRequestEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenToSwap: AddressLike,
    desiredToken: AddressLike,
    amountToSwap: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenToSwap: string,
    desiredToken: string,
    amountToSwap: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenToSwap: string;
    desiredToken: string;
    amountToSwap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapModule extends BaseContract {
  connect(runner?: ContractRunner | null): SwapModule;
  waitForDeployment(): Promise<this>;

  interface: SwapModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swapToken: TypedContractMethod<
    [
      tokenToSwap: AddressLike,
      desiredToken: AddressLike,
      amountToSwap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swapToken"
  ): TypedContractMethod<
    [
      tokenToSwap: AddressLike,
      desiredToken: AddressLike,
      amountToSwap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OK"
  ): TypedContractEvent<
    OKEvent.InputTuple,
    OKEvent.OutputTuple,
    OKEvent.OutputObject
  >;
  getEvent(
    key: "SwapTokenRequest"
  ): TypedContractEvent<
    SwapTokenRequestEvent.InputTuple,
    SwapTokenRequestEvent.OutputTuple,
    SwapTokenRequestEvent.OutputObject
  >;

  filters: {
    "OK()": TypedContractEvent<
      OKEvent.InputTuple,
      OKEvent.OutputTuple,
      OKEvent.OutputObject
    >;
    OK: TypedContractEvent<
      OKEvent.InputTuple,
      OKEvent.OutputTuple,
      OKEvent.OutputObject
    >;

    "SwapTokenRequest(address,address,address,uint256)": TypedContractEvent<
      SwapTokenRequestEvent.InputTuple,
      SwapTokenRequestEvent.OutputTuple,
      SwapTokenRequestEvent.OutputObject
    >;
    SwapTokenRequest: TypedContractEvent<
      SwapTokenRequestEvent.InputTuple,
      SwapTokenRequestEvent.OutputTuple,
      SwapTokenRequestEvent.OutputObject
    >;
  };
}
